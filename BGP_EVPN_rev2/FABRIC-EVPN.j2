{#BOOTSTRAP FOR SIMULATION#}
{% include "BGP_EVPN_rev2/DEFN-VRF.j2" %} {# #}
{% include "BGP_EVPN_rev2/FUNC-OBJECT-MACROS.j2" %} {# #}
{% include "BGP_EVPN_rev2/DEFN-ROLES.j2" %} {# #}
{% include "BGP_EVPN_rev2/DEFN-LOOPBACKS.j2" %} {# #}
{% include "BGP_EVPN_rev2/DEFN-VNIOFFSETS.j2" %} {# #}
{% include "BGP_EVPN_rev2/DEFN-L3OUT.j2" %} {# #}
{% include "BGP_EVPN_rev2/DEFN-OVERLAY.j2" %} {# #}
{{% include "BGP_EVPN_rev2/DEFN-IPSEC.j2" %} {# #}

{% macro evpnBuild(DEFN_VRF, DEFN_VRF_TO_NODE, DEVICE_HOSTNAME, DEFN_NODE_ROLES, DEFN_LOOP_UNDERLAY, DEFN_L3OUT, FABRIC_BGP_ASN, DEFN_LOOP_NAME, DEFN_IPSEC, DEFN_LOOP_MCLUSTER, DEFN_L3OUT_AGGREGATES ) %}

{# Resolve the VRF objects upfront #}
{% set vrf_objs = [] %}
{{ vrf_definition(DEFN_VRF, DEFN_VRF_TO_NODE, DEVICE_HOSTNAME) }}

{# =========================================== #}
{# BGP Border Prefix-List to prevent loops     #}
{# =========================================== #}
{% if DEVICE_HOSTNAME in DEFN_NODE_ROLES['RR'] %}
ip as-path access-list 100 permit _$
!
route-map EVPN-PEER-BORDER-OUT permit 10 
 match as-path 100
{% endif %}
!
{# ================================================================== #}
{# FABRICS BGP PEERING MUST TRACK /32 PEER ADDRESSES ONLY             #}
{# AND NOT FALLBACK TO AGGREGATE/DEFAULT WHEN THE PEER ADDR GOES AWAY #}
{# ================================================================== #}
{% for node,loop_ip in DEFN_LOOP_UNDERLAY.items() %}
ip prefix-list NODE-LOOPBACKS seq {{loop.index}} permit {{loop_ip}}/32
{% endfor %}
!
route-map NODE-LOOPBACKS permit 10
 match ip address prefix-list NODE-LOOPBACKS
!
{# ============================================= #}
{# L3OUT ON SPINES Interface Configuration Block #}
{# ============================================= #}
{% for vrf in vrf_objs %}
{% for l3out in DEFN_L3OUT %}
{% if l3out.vrf == vrf.name and l3out.node == DEVICE_HOSTNAME %}
{% for interface, params in l3out.interfaces.items() %}
interface {{interface}}
 encapsulation dot1Q {{params.vlan}}
 vrf forwarding {{vrf.name}}
 ip address {{params.ipaddr}}
!
{% endfor %}
{% endif %}
{% endfor %}
{% endfor %}

router bgp {{FABRIC_BGP_ASN}}
{# ============================= #}
{# BGP Global Settings Block     #}
{# ============================= #}
{% if DEVICE_HOSTNAME in DEFN_NODE_ROLES['RR'] %}
 template peer-policy OVERLAY-LEAF-EVPN-PEER-POLICY
  route-reflector-client
  soft-reconfiguration inbound
  send-community both
  advertise additional-paths all
  exit-peer-policy
!
 template peer-policy OVERLAY-BORDER-EVPN-PEER-POLICY
  soft-reconfiguration inbound
  send-community both
  exit-peer-policy
!
 template peer-policy OVERLAY-LEAF-MVPN-PEER-POLICY
  route-reflector-client
  soft-reconfiguration inbound
  send-community both
  exit-peer-policy
!
 template peer-policy OVERLAY-BORDER-EVPN-PEER-POLICY
  route-map EVPN-PEER-BORDER-OUT out
  route-reflector-client
  soft-reconfiguration inbound
  send-community both
  exit-peer-policy
!
 template peer-session UNDERLAY-LEAF-EVPN-PEER-SESSION-POLICY
  remote-as {{FABRIC_BGP_ASN}}
  log-neighbor-changes
  update-source {{DEFN_LOOP_NAME['UNDERLAY']}}
  fall-over route-map NODE-LOOPBACKS
  exit-peer-session
!
{% endif %}

{% if DEVICE_HOSTNAME in DEFN_NODE_ROLES['CLIENT'] %}
 template peer-policy OVERLAY-SPINE-EVPN-PEER-POLICY
  soft-reconfiguration inbound
  send-community both
  exit-peer-policy
!
 template peer-session UNDERLAY-SPINE-EVPN-PEER-SESSION-POLICY
  remote-as {{FABRIC_BGP_ASN}}
  description SPINE-EVPN-PEER
  log-neighbor-changes
  update-source {{DEFN_LOOP_NAME['UNDERLAY']}}
  fall-over route-map NODE-LOOPBACKS
  exit-peer-session
!
{% endif %}

{% if DEVICE_HOSTNAME in DEFN_NODE_ROLES['BORDER'] %}
template peer-session OVERLAY-Border-EVPN-PEER-SESSION-POLICY
  description VXLAN-GW-2-LEAF-EVPN-PEER
  log-neighbor-changes
  ebgp-multihop 255
  update-source Loopback2
 exit-peer-session
{% endif %}

 bgp router-id interface Loopback0
 bgp log-neighbor-changes
 {# bgp graceful-restart #}
 no bgp default ipv4-unicast
!
{# ============================= #}
{# BGP Neighbors                #}
{# ============================= #}
{% if DEVICE_HOSTNAME in DEFN_NODE_ROLES['RR'] %}
{% for client in DEFN_NODE_ROLES['CLIENT'] %}
  neighbor {{DEFN_LOOP_UNDERLAY[client]}} inherit peer-session UNDERLAY-LEAF-EVPN-PEER-SESSION-POLICY
{% endfor %}
{% endif %}
{% if DEVICE_HOSTNAME in DEFN_NODE_ROLES['CLIENT'] %}
{% for rr in DEFN_NODE_ROLES['RR'] %}
  neighbor {{DEFN_LOOP_UNDERLAY[rr]}} inherit peer-session UNDERLAY-SPINE-EVPN-PEER-SESSION-POLICY
{% endfor %}
{% endif %}
{% if DEVICE_HOSTNAME in DEFN_NODE_ROLES['BORDER'] %}
{# BUILD MULTI-CLUSTER NEIGHBORS #}
{% for tun,params in DEFN_IPSEC.items() %}
{% if tun == DEVICE_HOSTNAME %}
{% for p in params %}
  neighbor {{p['peer_ip']}} inherit peer-session OVERLAY-BORDER-EVPN-PEER-SESSION-POLICY
  neighbor {{p['peer_ip']}} remote-as {{p['peer_bgp_asn']}}
  neighbor {{p['peer_ip']}} activate
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
!
{# ============================= #}
{# Address-Family: ipv4          #}
{# ============================= #}
  address-family ipv4
   maximum-paths ibgp {{ DEFN_NODE_ROLES['BORDER'] | length }}
{% if DEVICE_HOSTNAME in DEFN_NODE_ROLES['BORDER'] %}
   network {{DEFN_LOOP_MCLUSTER[DEVICE_HOSTNAME]}} mask 255.255.255.255
{% endif %}
   exit-address-family
!
{# ============================= #}
{# Address-Family: ipv4 vrf      #}
{# L3OUT CONFIGURATION ON SPINES #}
{# ============================= #}
{% for vrf in vrf_objs %}
{% for l3out in DEFN_L3OUT %}
{% if l3out.vrf == vrf.name and l3out.node == DEVICE_HOSTNAME and DEVICE_HOSTNAME in DEFN_NODE_ROLES['SPINE'] %}
  address-family ipv4 vrf {{vrf.name}}
   advertise l2vpn evpn

{% for aggregate in DEFN_L3OUT_AGGREGATES %}
   aggregate-address {{aggregate}} summary-only
{% endfor %}
   redistribute static
   redistribute connected
{% for interface, params in l3out.interfaces.items() %}
   neighbor {{params.neighbour}} remote-as {{l3out.neighbour_asn}}
   neighbor {{params.neighbour}} activate
{% endfor %}
   exit-address-family
!
{% endif %}
{% endfor %}
{% endfor %}
!
{# ============================= #}
{# Address-Family: ipv4 vrf      #}
{# L3OUT CONFIGURATION ON BORDERS #}
{# ============================= #}
{% if DEVICE_HOSTNAME in DEFN_NODE_ROLES['BORDER'] %}
{% for vrf in vrf_objs %}
  address-family ipv4 vrf {{vrf.name}}
   advertise l2vpn evpn
   import path selection all
   maximum-paths ibgp {{ DEFN_NODE_ROLES['SPINE'] | length }}
   exit-address-family
!
{% endfor %}
{% endif %}
{# ============================= #}
{# Address-Family: l2vpn evpn    #}
{# ============================= #}
  address-family l2vpn evpn
   bgp nexthop trigger delay 0
{% if DEVICE_HOSTNAME in DEFN_NODE_ROLES['RR'] %}
   bgp additional-paths select all
   bgp additional-paths send receive
{% for client in DEFN_NODE_ROLES['CLIENT'] %}
{# BORDER PEER POLICY APPLIES AS-PATH PREFIX OUT TO PREVENT SPINES FROM          #}
{# REFLECTING ROUTES RECEIVED FROM THE BORDER BACK AT THE BORDER CREATING A LOOP #}
{# THIS IS REQUIRED WHEN SPINES ARE CONFIGURED WITH THESE TWO COMMANDS           #}
{# bgp additional-paths select all                                               #}
{# bgp additional-paths send receive                                             #}
{% if client in DEFN_NODE_ROLES['BORDER'] %}
   neighbor {{DEFN_LOOP_UNDERLAY[client]}} activate
   neighbor {{DEFN_LOOP_UNDERLAY[client]}} inherit peer-policy OVERLAY-BORDER-EVPN-PEER-POLICY
{% else %}
   neighbor {{DEFN_LOOP_UNDERLAY[client]}} activate
   neighbor {{DEFN_LOOP_UNDERLAY[client]}} inherit peer-policy OVERLAY-LEAF-EVPN-PEER-POLICY
{% endif %}
{% endfor %}
{% endif %}

{# BORDER NODES ARE SUBSET OF CLIENTS, BUT THEY HAVE ADDITIONAL LOGIC            #}
{% if DEVICE_HOSTNAME in DEFN_NODE_ROLES['CLIENT'] %}

{% if DEVICE_HOSTNAME in DEFN_NODE_ROLES['BORDER'] %}
{# VXLAN MULTI-CLUSTER SUPPORT #}
   rewrite-evpn-rt-asn
{# BUILD MULTI-CLUSTER NEIGHBORS #}
{% for tun,params in DEFN_IPSEC.items() %}
{% if tun == DEVICE_HOSTNAME %}
{% for p in params %}
   neighbor {{p['peer_ip']}} inherit peer-session OVERLAY-BORDER-EVPN-PEER-POLICY
   neighbor {{p['peer_ip']}} remote-as {{p['peer_bgp_asn']}}
   neighbor {{p['peer_ip']}} activate
{% endfor %}
{% endif %}
{% endfor %}

{% else %}
   bgp additional-paths receive
{% endif %}

{% for rr in DEFN_NODE_ROLES['RR'] %}
   neighbor {{DEFN_LOOP_UNDERLAY[rr]}} activate
   neighbor {{DEFN_LOOP_UNDERLAY[rr]}} inherit peer-policy OVERLAY-SPINE-EVPN-PEER-POLICY
{% if DEVICE_HOSTNAME in DEFN_NODE_ROLES['BORDER'] %}
   neighbor {{DEFN_LOOP_UNDERLAY[rr]}} next-hop-self
{% endif %}
{% endfor %}
{% endif %}
   exit-address-family
!


{# ============================= #}
{# Address-Family: ipv4 mvpn   #}
{# ============================= #}
  address-family ipv4 mvpn
   bgp nexthop trigger delay 0
{% if DEVICE_HOSTNAME in DEFN_NODE_ROLES['RR'] %}
{% for client in DEFN_NODE_ROLES['CLIENT'] %}
   neighbor {{DEFN_LOOP_UNDERLAY[client]}} activate
   neighbor {{DEFN_LOOP_UNDERLAY[client]}} inherit peer-policy OVERLAY-LEAF-MVPN-PEER-POLICY
{% endfor %}
{% endif %}
{% if DEVICE_HOSTNAME in DEFN_NODE_ROLES['CLIENT'] %}
{% for rr in DEFN_NODE_ROLES['RR'] %}
   neighbor {{DEFN_LOOP_UNDERLAY[rr]}} activate
   neighbor {{DEFN_LOOP_UNDERLAY[rr]}} inherit peer-policy OVERLAY-SPINE-EVPN-PEER-POLICY
{% endfor %}
{% endif %}
   exit-address-family
!
    
{% endmacro %}

{# Extra Line due to Template Editor Glitch #}
{# End of File #}

{% include "EVPN/DEFN-VRF" %}
{% include "EVPN/DEFN-ROLES" %}
{% include "EVPN/DEFN-LOOPBACKS" %}
{% include "EVPN/DEFN-VNIOFFSETS" %}
{% include "EVPN/DEFN-L3OUT" %}
{% include "EVPN/DEFN-OVERLAY" %}

{# Resolve input VRF names to full VRF objects #}
{% set vrf_objs = [] %}
{% for input_vrf in vrf_list %}
  {% set vrf_match = (DEFN_VRF | selectattr("name", "equalto", input_vrf) | list | first) %}
  {% if vrf_match %}{% do vrf_objs.append(vrf_match | first) %}{% endif %}
{% endfor %}

{# =========================================== #}
{# BGP Border Prefix-List to prevent loops     #}
{# =========================================== #}
{% if __device.hostname in DEFN_NODE_ROLES['RR'] %}
ip as-path access-list 100 permit _$
!
route-map EVPN-PEER-BORDER-OUT permit 10 
match as-path 1
{% endif %}
!
{# ============================================= #}
{# L3OUT ON SPINES Interface Configuration Block #}
{# ============================================= #}
{% for vrf in vrf_objs %}
{% for l3out in DEFN_L3OUT %}
{% if l3out.vrf == vrf.name and l3out.node == __device.hostname %}
{% for interface, params in l3out.interfaces.items() %}
interface {{interface}}
 encapsulation dot1Q {{params.vlan}}
 vrf forwarding {{vrf.name}}
 ip address {{params.ipaddr}}
!
{% endfor %}
{% endif %}
{% endfor %}
{% endfor %}

router bgp {{FABRIC_BGP_ASN}}
{# ============================= #}
{# BGP Global Settings Block     #}
{# ============================= #}
{% if __device.hostname in DEFN_NODE_ROLES['RR'] %}
template peer-policy OVERLAY-LEAF-EVPN-PEER-POLICY
route-reflector-client
soft-reconfiguration inbound
send-community both
advertise additional-paths all
exit-peer-policy
!
template peer-policy OVERLAY-LEAF-MVPN-PEER-POLICY
route-reflector-client
soft-reconfiguration inbound
send-community both
exit-peer-policy
!
template peer-policy OVERLAY-BORDER-EVPN-PEER-POLICY
route-map EVPN-PEER-BORDER-OUT out
route-reflector-client
soft-reconfiguration inbound
send-community both
exit-peer-policy
!
template peer-session UNDERLAY-LEAF-EVPN-PEER-SESSION-POLICY
remote-as {{FABRIC_BGP_ASN}}
log-neighbor-changes
update-source {{DEFN_LOOP_NAME['UNDERLAY']}}
exit-peer-session
!
{% endif %}

{% if __device.hostname in DEFN_NODE_ROLES['CLIENT'] %}
template peer-policy OVERLAY-SPINE-EVPN-PEER-POLICY
 soft-reconfiguration inbound
 send-community both
exit-peer-policy
!
template peer-session UNDERLAY-SPINE-EVPN-PEER-SESSION-POLICY
remote-as {{FABRIC_BGP_ASN}}
description SPINE-EVPN-PEER
log-neighbor-changes
update-source {{DEFN_LOOP_NAME['UNDERLAY']}}
exit-peer-session
!
{% endif %}

bgp router-id interface Loopback0
bgp log-neighbor-changes
bgp graceful-restart
no bgp default ipv4-unicast
!
{# ============================= #}
{# BGP Neighbors                #}
{# ============================= #}
{% if __device.hostname in DEFN_NODE_ROLES['RR'] %}
{% for client in DEFN_NODE_ROLES['CLIENT'] %}
neighbor {{DEFN_LOOP_UNDERLAY[client]}} inherit peer-session UNDERLAY-LEAF-EVPN-PEER-SESSION-POLICY
{% endfor %}
{% elif __device.hostname in DEFN_NODE_ROLES['CLIENT'] %}
{% for rr in DEFN_NODE_ROLES['RR'] %}
neighbor {{DEFN_LOOP_UNDERLAY[rr]}} inherit peer-session UNDERLAY-SPINE-EVPN-PEER-SESSION-POLICY
{% endfor %}
{% endif %}
!
{# ============================= #}
{# Address-Family: l2vpn evpn    #}
{# ============================= #}
address-family ipv4
maximum-paths ibgp {{ DEFN_NODE_ROLES['SPINE'] | length }}
exit-address-family
!
{# ============================= #}
{# Address-Family: ipv4 vrf      #}
{# L3OUT CONFIGURATION ON SPINES #}
{# ============================= #}
{% for vrf in vrf_objs %}
{% for l3out in DEFN_L3OUT %}
{% if l3out.vrf == vrf.name and l3out.node == __device.hostname and __device.hostname in DEFN_NODE_ROLES['SPINE'] %}
address-family ipv4 vrf {{vrf.name}}
advertise l2vpn evpn
{% for aggregate in DEFN_L3OUT_AGGREGATES %}
aggregate-address {{aggregate}} summary-only
{% endfor %}
redistribute static
redistribute connected
{% for interface, params in l3out.interfaces.items() %}
neighbor {{params.neighbour}} remote-as {{l3out.neighbour_asn}}
neighbor {{params.neighbour}} activate
{% endfor %}
exit-address-family
!
{% endif %}
{% endfor %}
{% endfor %}
!
{# ============================= #}
{# Address-Family: l2vpn evpn    #}
{# ============================= #}
address-family l2vpn evpn
{% if __device.hostname in DEFN_NODE_ROLES['RR'] %}
bgp additional-paths select all
bgp additional-paths send receive
{% for client in DEFN_NODE_ROLES['CLIENT'] %}
{# BORDER PEER POLICY APPLIES AS-PATH PREFIX OUT TO PREVENT SPINES FROM          #}
{# REFLECTING ROUTES RECEIVED FROM THE BORDER BACK AT THE BORDER CREATING A LOOP #}
{# THIS IS REQUIRED WHEN SPINES ARE CONFIGURED WITH THESE TWO COMMANDS           #}
{# bgp additional-paths select all                                               #}
{# bgp additional-paths send receive                                             #}
{% if client in DEFN_NODE_ROLES['BORDER'] %}
neighbor {{DEFN_LOOP_UNDERLAY[client]}} activate
neighbor {{DEFN_LOOP_UNDERLAY[client]}} inherit peer-policy OVERLAY-BORDER-EVPN-PEER-POLICY
{% else %}
neighbor {{DEFN_LOOP_UNDERLAY[client]}} activate
neighbor {{DEFN_LOOP_UNDERLAY[client]}} inherit peer-policy OVERLAY-LEAF-EVPN-PEER-POLICY
{% endif %}
{% endfor %}
{% endif %}

{# BORDER NODES ARE SUBSET OF CLIENTS, BUT THEY HAVE ADDITIONAL LOGIC            #}
{% if __device.hostname in DEFN_NODE_ROLES['CLIENT'] %}

{% if __device.hostname in DEFN_NODE_ROLES['BORDER'] %}
{# VXLAN MULTI-CLUSTER SUPPORT #}
rewrite-evpn-rt-asn
{% else %}
bgp additional-paths receive
{% endif %}

{% for rr in DEFN_NODE_ROLES['RR'] %}
neighbor {{DEFN_LOOP_UNDERLAY[rr]}} activate
neighbor {{DEFN_LOOP_UNDERLAY[rr]}} inherit peer-policy OVERLAY-SPINE-EVPN-PEER-POLICY
{% if __device.hostname in DEFN_NODE_ROLES['BORDER'] %}
neighbor {{DEFN_LOOP_UNDERLAY[rr]}} next-hop-self
{% endif %}
{% endfor %}
{% endif %}
exit-address-family
!


{# ============================= #}
{# Address-Family: ipv4 mvpn   #}
{# ============================= #}
address-family ipv4 mvpn
{% if __device.hostname in DEFN_NODE_ROLES['RR'] %}
{% for client in DEFN_NODE_ROLES['CLIENT'] %}
neighbor {{DEFN_LOOP_UNDERLAY[client]}} activate
neighbor {{DEFN_LOOP_UNDERLAY[client]}} inherit peer-policy OVERLAY-LEAF-MVPN-PEER-POLICY
{% endfor %}
{% endif %}
{% if __device.hostname in DEFN_NODE_ROLES['CLIENT'] %}
{% for rr in DEFN_NODE_ROLES['RR'] %}
neighbor {{DEFN_LOOP_UNDERLAY[rr]}} activate
neighbor {{DEFN_LOOP_UNDERLAY[rr]}} inherit peer-policy OVERLAY-SPINE-EVPN-PEER-POLICY
{% endfor %}
{% endif %}
exit-address-family
!